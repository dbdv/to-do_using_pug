doctype html
html
    head
        title=list.title
        link(rel='stylesheet' href='/stylesheets/todo.css')
        link(rel='stylesheet' href='https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200')
        script(defer src="/javascript/listView.js") 

    body(style="background-color:#313246;")
        div.header
            h1(id=list.id class="title") To-do list
        div(style={"display":"flex",  "justify-content":"center", "width":"100%"})
            div.myLists 
                h1 Mis listas
                button(class="openModalList-btn" onclick="toggleModal(0)")
                        span AGREGAR
                        img(src="/images/circle-plus-solid.svg" )
                //- ul 
                a(href="/todo") Inicio 
                each list in LISTS 
                    a(href=`/list/${list.id}`)=list.title
            div.modal-off
                div.backOpacity
                div(class="newTaskForm newListForm")
                    button(class="close-btn" onclick="toggleModal(0)") X
                    form(action="/list/add" method="POST" class="myForm")
                        div.modalTitle 
                            h3 Nueva lista
                        div(class="newItemContainer")
                            div(class="newItemDiv" style="margin-left: 5px;margin-right: 2.5px;")
                                input(class="" placeholder="Título"  name="newList" id="titleList" required="required")
                                button(class="material-symbols-outlined" onclick="return clearTitleList()" ) clear
                        
                        div
                            div.prioritiesContainer 
                                span Estado
                                div.prioritiesDiv 
                                    input(type="radio" name="state-list" value="Sin resolver" id="option-list-s-1" checked)
                                    label(for="option-list-s-1" class="option option-1") 
                                        div.priorities 
                                            span Sin resolver 
                                    input(type="radio" name="state-list" value="Resuelta" id="option-list-s-2")
                                    label(for="option-list-s-2" class="option option-2") 
                                        div.priorities 
                                            span Resuelta
                        
                        div.prioritiesContainer
                            div.prioritiesDiv
                                button(class="add-btn" onclick="return addList()") Agregar 
            div(class="myContainer" style="background-color:white")
                .container
                    h1( class="text-center")=list.title
                    button(onclick=`deleteList(${list.id})`) Eliminar lista
                    button(class="openModal-btn" onclick="toggleModal(1)")
                        span AGREGAR
                        img(src="/images/circle-plus-solid.svg" )
                    div.orderBy 
                        span Ordenar por: 
                        div()
                            div(id="optionsParent")
                                //input(type="checkbox" name="priority" id="priority" class="orderOption" )
                                label(for="priority" id="priority" class=`opPriority ${selected !==null && selected.priority !== undefined ? "opSelected": ""}`) Prioridad 
                                //input(type="checkbox" name="creationDate" id="creationDate" class="orderOption" )
                                label(for="creationDate" id="creationDate" class=`opCreationDate ${selected !==null && selected.creationDate !== undefined ? "opSelected": ""}`) Fecha de creacion
                                //input(type="checkbox" name="deadline" id="deadline" class="orderOption")
                                label(for="deadline" id="deadline" class=`opDeadline ${selected !==null && selected.deadline !== undefined ? "opSelected": ""}`) Fecha límite
                            div.direc
                                if selected !== null && selected.ASC 
                                    input(type="radio" name="direc" id="ASC" value="ASC" class="orderRadio orderRadioASC" checked)
                                    label(for="ASC" class=`asc ` name="direc") Ascendente
                                    input(type="radio" name="direc" id="DESC" value="DESC" class="orderRadio orderRadioDESC")
                                    label(for="DESC" class=`desc` name="direc") Descendente
                                else 
                                    input(type="radio" name="direc" id="ASC" value="ASC" class="orderRadio")
                                    label(for="ASC" class=`asc ` name="direc") Ascendente
                                    input(type="radio" name="direc" id="DESC" value="DESC" class="orderRadio" checked)
                                    label(for="DESC" class=`desc ` name="direc") Descendente
                            button(onclick="setOrder();") Ordenar
                    if ITEMS.length > 0
                        ul(class="list" id=ulTodo)
                            each task in ITEMS         
                                nav(class=`list-nav ${task.state}` id=task.id)
                                
                                    li.list-item
                                        span=task.title
                                        p=`Detalle: ${task.descrip}` 
                                        p=`Prioridad: ${task.priority}`
                                        p=`Estado: ${task.state}`
                                        if task.deadline !== null
                                            p=`Fecha límite: ${task.deadline}`
                                        if task.Lists !== undefined && task.Lists.length !== 0
                                            p Listas: 
                                                each list in task.Lists
                                                    =`"${list.title}" `
                                    //-button(class="btn-close")
                                    div.buttons
                                        if task.state !== "Resuelta"
                                            //button(id="unresolve-btn" value=task.id class="" onclick=`return markAsUnresolve(${task.id})`) Sin resolver
                                            if task.state === "Resolviendo"
                                                button(id="resolve-btn" value=task.id class="" onclick=`return markAsUnresolve(${task.id})`) Sin resolver
                                            else
                                                button(id="resolve-btn" value=task.id class="" onclick=`return markAsResolving(${task.id})`) Resolviendo
                                            button(id="resolve-btn" value=task.id class="" onclick=`return markAsResolve(${task.id})`) Resolver
                                        else
                                        button(id="delte-btn" class="btn btn-danger" onclick=`return removeItem(${task.id}, ${list.id})`) Sacar 
                                        ////-
                                        button(id="delete-btn" value=task.id class="btn btn-danger" onclick=`return deleteTask(${task.id})`) Borrar
                    else 
                        span Esta lista está vacía.
            div.modal-off
                div.backOpacity
                div(class="newTaskForm")
                    button(class="close-btn" onclick="toggleModal(1)") X
                    form(action="/todo/add" method="POST" class="myForm")
                        div.modalTitle
                            h3 Nuevo item
                        div(class="newItemContainer")
                            div(class="newItemDiv" style="margin-left: 5px;margin-right: 2.5px;")
                                input(class="" placeholder="Título"  name="newTask" id="title" required="required")
                                button(class="material-symbols-outlined" onclick="return clearTitle()" ) clear
                        div(class="newItemContainer")
                            div(class="newItemDiv" style="margin-left: 5px;margin-right: 2.5px;")
                                input(class="" placeholder="Descripción"  name="newTask" id="descrip" required="required")
                                button(class="material-symbols-outlined" onclick="return clearDescrip()" ) clear
                        div
                            div.prioritiesContainer 
                                span Prioridad
                                div.prioritiesDiv 
                                    input(type="radio" name="priority" value="Baja" id="option-p-1")
                                    label(for="option-p-1" class="option option-1") 
                                        div.priorities 
                                            span Baja 
                                    input(type="radio" name="priority" value="Media" id="option-p-2" checked)
                                    label(for="option-p-2" class="option option-2") 
                                        div.priorities 
                                            span Medium
                                    input(type="radio" name="priority" value="Alta" id="option-p-3")
                                    label(for="option-p-3" class="option option-3") 
                                        div.priorities 
                                            span Alta
                        div
                            div.prioritiesContainer 
                                span Estado
                                div.prioritiesDiv 
                                    input(type="radio" name="state" value="Sin resolver" id="option-s-1")
                                    label(for="option-s-1" class="option option-1") 
                                        div.priorities 
                                            span Sin resolver 
                                    input(type="radio" name="state" value="Resolviendo" id="option-s-2" checked)
                                    label(for="option-s-2" class="option option-2") 
                                        div.priorities 
                                            span Resolviendo
                                    input(type="radio" name="state" value="Resuelta" id="option-s-3")
                                    label(for="option-s-3" class="option option-3") 
                                        div.priorities 
                                            span Resuelta
                        div.deadlineContainer 
                            div.prioritiesDiv
                                span Fecha limite 
                                input(type="checkbox" name="dl")
                                input(type="date" name="dldate")
                        div
                            span Lista
                            div.listsCheckboxes
                                span(class="text-center")=list.title
                        div.prioritiesContainer
                            div.prioritiesDiv
                                button(class="add-btn" onclick="return addTask()") Agregar
        //--script.

            let idList;

            window.onload = ()=>{
                const optionsParent = document.getElementById("optionsParent");
                optionsParent.addEventListener("click", (e)=>{
                    console.log(e)
                    if(e.target.name != "direc" && e.target.tagName === "LABEL")
                        e.target.classList.toggle("opSelected");
                })

                idList = document.querySelector(".title").id;
                console.log(idList);
            }

            function toggleModal(n){
                const modal = document.querySelectorAll(".modal-off")[n]
                modal.classList.toggle("modal");
            }

            function addList(){
                console.log(document.querySelector("#titleList"));
                const newList = {
                    id:null,
                    title: document.querySelector("#titleList").value,
                    state: document.querySelector("input[name='state-list']:checked").value,
                    resolutionDate: null,
                    creationDate: new Date(Date.now()),
                }

                console.table(newList)

                if(!newList.title.length){
                    alert("La lista necesita un título")
                    return false;
                }


                var xhttp = new XMLHttpRequest();
                xhttp.open("POST", "/list/add", true); 
                xhttp.setRequestHeader("Content-Type", "application/json");
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        // Response
                        var response = this.responseText;
                    }
                };
                var data = newList;
                xhttp.send(JSON.stringify(data));
                clearTitleList();

                setTimeout(() => {
                    location.reload()
                }, 500);

            
                return false;
            }

            function addTask (){

                const newTask = {
                    id:null,
                    title: document.querySelector("#title").value.toString(),
                    descrip: document.querySelector("#descrip").value.toString(),
                    priority: document.querySelector("input[name='priority']:checked").value,
                    state: document.querySelector("input[name='state']:checked").value,
                    creationDate: new Date(Date.now()),
                    deadline: document.querySelector("input[name='dl']").checked ? document.querySelector("input[name='dldate']").value : null,
                    resolutionDate: null
                }
                //- const selectedLists = document.getElementsByClassName("listCheckbox");
                //- console.log(typeof selectedLists)
                
                //- for(const sl in selectedLists){
                //-     if(selectedLists[sl].checked)
                //-         listsID.push(selectedLists[sl].value);
                //- }

                //- console.log("ID: ",listsID);
                //- if(!newTask.title.length || !newTask.descrip.length){
                //-     alert("No puede ingresar una tarea sin título y descrpción.")
                //-     return false;
                //- }

                //- console.log(typeof newTask.deadline)

                if(newTask.deadline !== null &&  new Date(newTask.deadline) < new Date(Date.now())){
                    alert("No puede elegir una fecha que ya pasó!");
                    return false;
                }

                var xhttp = new XMLHttpRequest();
                xhttp.open("POST", `list/${idList}/item/add`, true); 
                xhttp.setRequestHeader("Content-Type", "application/json");
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        // Response
                        var response = this.responseText;
                    }
                };
                var data = {newTask: newTask};
                console.log(data)
                xhttp.send(JSON.stringify(data));
                clearTitle();
                clearDescrip();

                setTimeout(() => {
                    location.reload()
                }, 500);

            
                return false;
            }

            function markAsResolve(id){

                var xhttp = new XMLHttpRequest();
                xhttp.open("POST", `/item/markAsResolved/${id}`, true); 
                xhttp.setRequestHeader("Content-Type", "XMLHttpRequest");
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        // Response
                        var response = this.responseText;
                    }
                };
                xhttp.send();

                const div = document.getElementById(id)//document.querySelector("#"+id);
                div.classList.add("resolve");
                //- setTimeout(()=>{
                //-     div.remove();
                //- }, 1000)
                setTimeout(() => {
                    location.reload()
                }, 500);

                return false;
            }

            function markAsUnresolve(id){

                var xhttp = new XMLHttpRequest();
                xhttp.open("POST", `/item/markAsUnresolve/${id}`, true); 
                xhttp.setRequestHeader("Content-Type", "XMLHttpRequest");
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        // Response
                        var response = this.responseText;
                    }
                };
                xhttp.send();

                const div = document.getElementById(id)//document.querySelector("#"+id);
                div.classList.remove("resolve");
                //- setTimeout(()=>{
                //-     div.remove();
                //- }, 1000)
                setTimeout(() => {
                    location.reload()
                }, 500);

                return false;
            }

            function markAsResolving(id){

                var xhttp = new XMLHttpRequest();
                xhttp.open("POST", `/item/markAsResolving/${id}`, true); 
                xhttp.setRequestHeader("Content-Type", "XMLHttpRequest");
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        // Response
                        var response = this.responseText;
                    }
                };
                xhttp.send();

                const div = document.getElementById(id)//document.querySelector("#"+id);
                div.classList.remove("resolve");
                //- setTimeout(()=>{
                //-     div.remove();
                //- }, 1000)
                setTimeout(() => {
                    location.reload()
                }, 500);

                return false;
            }

            function deleteTask (id){


                //console.log(id)

                var xhttp = new XMLHttpRequest();
                xhttp.open("POST", `/item/delete/${id}`, true); 
                xhttp.setRequestHeader("Content-Type", "XMLHttpRequest");
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        // Response
                        var response = this.responseText;
                    }
                };
                xhttp.send();

                const div = document.getElementById(id)//document.querySelector("#"+id);
                div.classList.add("deleting");
                setTimeout(()=>{
                    div.remove();
                }, 1000)

                return false;
            }

            function setOrder(){

                const options = document.getElementsByClassName("orderOption");
                const selected = document.getElementsByClassName("opSelected");
                const radios = document.getElementsByClassName("orderRadio");

                var order = [];
                let direc;

                //- console.table(selected)


                for(const s in selected){
                    //- console.log(selected[s].id)
                    if(selected[s].id !== undefined && selected[s].id !== "")
                        order.push(`${selected[s].id}`);
                }

                for(const r in radios){
                    if(radios[r].checked)
                        direc = radios[r].value
                }

                console.log(direc)
                //- console.log(radios)
                
                if(order.length === 0){
                    alert("No ha seleccionado un orden;")
                    return false;
                }

                document.location.href = `/list/${idList}/orderBy/${order.join("/")}/${direc}`;

            }

            function clearTitle(){
                document.querySelector("#title").value = ""
                return false;
            }

            function clearTitleList(){
                document.querySelector("#titleList").value = ""
                return false;
            }

            function clearDescrip(){
                document.querySelector("#descrip").value = ""
                return false;
            }

            function removeItem(id_item, id_list){
            var xhttp = new XMLHttpRequest();
                xhttp.open("POST", `/list/unlink/${id_item}`, true); 
                xhttp.setRequestHeader("Content-Type", "application/json");
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4 && this.status == 200) {
                        // Response
                        var response = this.responseText;
                    }
                };
                //- console.log("id de list: ",id_list)
                //- console.log("id de item: ",id_item)
                var data = {"id_item": id_item, "id_list": id_list};

                //- console.log("la data: ", data)
                //- console.log(JSON.stringify(data))
                xhttp.send(JSON.stringify(data));

                //- const div = document.getElementById(id_item)//document.querySelector("#"+id);
                //- div.classList.add("removing");
                setTimeout(()=>{
                    //- div.remove();
                    location.reload();
                }, 1000)
            return false;
            }

            function deleteList(id){

                const items = document.getElementsByClassName("list-nav");

                if(items.length !== 0){
                    alert   ("La lista solo puede eliminarse si está vacía.")
                    return false;
                }

                var xhttp = new XMLHttpRequest();
                    xhttp.open("POST", `/list/delete/${id}`, true); 
                    xhttp.setRequestHeader("Content-Type", "XMLHttpRequest");
                    xhttp.onreadystatechange = function() {
                        if (this.readyState == 4 && this.status == 200) {
                            // Response
                            var response = this.responseText;
                        }
                    };
                    xhttp.send();

                    setTimeout(()=>{
                        //- div.remove();
                        window.location.replace("/");
                    }, 1000)
                return false;
            }